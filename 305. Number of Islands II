A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:
Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].
Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).
0 0 0
0 0 0
0 0 0
Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.

1 0 0
0 0 0   Number of islands = 1
0 0 0
Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.

1 1 0
0 0 0   Number of islands = 1
0 0 0
Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.

1 1 0
0 0 1   Number of islands = 2
0 0 0
Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.

1 1 0
0 0 1   Number of islands = 3
0 1 0
We return the result as an array: [1, 1, 2, 3]



//http://massivealgorithms.blogspot.com/2015/11/like-coding-leetcode-305-number-of.html
public class Solution {
    int[][] directions={{0,-1}, {0,1}, {1,0},{-1,0}};
    
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        UnionFind2D islands=new UnionFind2D(m,n);
        List<Integer> result=new LinkedList<Integer>();
        for(int[] position:positions){
            int p_id=islands.add(position[0],position[1]);
            for(int[] dir:directions){
                int q_id=islands.getID(position[0]+dir[0],position[1]+dir[1]);
                if(q_id!=0 && !islands.isSameIsland(p_id,q_id)){
                    islands.unite(p_id,q_id);
                }
            }
            result.add(islands.count);
        }
        return result;
    }
}

 class UnionFind2D{
        int count;
        int m;
        int n;
        int[] id;
        int[] island_size;
        
        public UnionFind2D(int m, int n){
            this.m=m;
            this.n=n;
            this.count=0;
            this.id=new int[m*n+1];
            this.island_size=new int[m*n+1];
        }
        
        public int index(int x, int y){
            return x*n+y+1;
        }
        
        public int getID(int x, int y){
            if(x>=0 && x<m && y>=0 && y<n){
                return id[index(x,y)];
            }
            else return 0;
        }
        
        public int add(int x, int y){
            int i=index(x,y);
            id[i]=i;
            island_size[i]=1;
            count++;
            return i;
        }
        
        public boolean isSameIsland(int x, int y){
            return root(x)==root(y);
        }
        
        public int root(int x){
            while(x!=id[x]){
                int tmp=id[id[x]];
                x=tmp;
            }
            return x;
        }
        
        public void unite(int x, int y){
            int root_p=root(x);
            int root_q=root(y);
            if(island_size[root_p]<island_size[root_q]){
                id[root_p]=id[root_q];
                island_size[root_q]+=island_size[root_p];
            }
            else{
                id[root_q]=id[root_p];
                island_size[root_p]+=island_size[root_q];
            }
            count--;
        }
    }
