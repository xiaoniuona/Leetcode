Given a binary tree, find the length of the longest consecutive sequence path.
The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).

For example,
   1
    \
     3
    / \
   2   4
        \
         5
Longest consecutive sequence path is 3-4-5, so return 3.
   2
    \
     3
    / 
   2    
  / 
 1
Longest consecutive sequence path is 2-3,not3-2-1, so return 2.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /*
 因为要找最长的连续路径，我们在遍历树的时候需要两个信息，一是目前连起来的路径有多长，二是目前路径的上一个节点的值。我们通过递归把这些信息代入，然后通过返回值返回一个最大的就行了。这种需要遍历二叉树，然后又需要之前信息的题目思路都差不多，比如Maximum Depth of Binary Tree和Binary Tree Maximum Path Sum。
 时间O(n) 空间O(h)
 */
public class Solution {
    public int longestConsecutive(TreeNode root) {
        if(root==null) return 0;
        return longestConsecutiveBinaryTree(root,0,root.val-1);
    }
    
    public int longestConsecutiveBinaryTree(TreeNode root, int length, int prev){
        if(root==null) return length;
        if(root.val-prev==1) length++;
        else length=1;
        return Math.max(length,Math.max(longestConsecutiveBinaryTree(root.left,length,root.val),longestConsecutiveBinaryTree(root.right,length,root.val)));
    }
}
