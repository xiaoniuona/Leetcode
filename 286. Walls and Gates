You are given a m x n 2D grid initialized with these three possible values.
-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
public class Solution {
    public void wallsAndGates(int[][] rooms) {
        if(rooms==null || rooms.length==0) return;
        int row=rooms.length;
        int col=rooms[0].length;
        Queue<Integer> q=new LinkedList<Integer>();
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(rooms[i][j]==0) {
                    boolean[][] visited=new boolean[row][col];
                    q.add(i*col+j);
                    bfs(rooms,q,visited);
                }
            }
        }
    }  
    
    public void bfs(int[][] rooms, Queue<Integer> q, boolean[][] visited){
        int row=rooms.length;
        int col=rooms[0].length;
        int distance=1;
        while(!q.isEmpty()){
            int size=q.size();
            for(int x=0; x<size; x++){
                int num=q.poll();
                int i=num/col;
                int j=num%col;
                for(int m=-1; m<=1; m++){
                    for(int n=-1; n<=1; n++){
                        if(Math.abs(m)==Math.abs(n) || i+m<0 || i+m>=row || j+n<0 || j+n>=col || visited[i+m][j+n]) continue;
                        if(rooms[i+m][j+n]>0){
                            rooms[i+m][j+n]=Math.min(rooms[i+m][j+n],distance);
                            q.add((i+m)*col+j+n);
                            visited[i+m][j+n]=true;
                        }
                    }
                }
           }
           distance++;
        }
    }
}
