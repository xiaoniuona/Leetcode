Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.


public class Solution {
    public boolean validTree(int n, int[][] edges) {
        UnionFindGraph g=new UnionFindGraph(n);
        for(int[] edge:edges){
            if(g.find(edge[0])==g.find(edge[1])) return false;
            else g.unite(edge[0],edge[1]);
        }
        return g.count==1;
    }
    public class UnionFindGraph{
        int[] id;
        int[] size;
        int count;
        
        public UnionFindGraph(int n){
            this.id=new int[n];
            this.size=new int[n];
            for(int i=0; i<n; i++){
                id[i]=i;
            }
            this.count=n;
        }
        
        public int find(int i){
            return id[i];
        }
        
        public void unite(int x, int y){
            int p=id[x];
            int q=id[y];
            if(size[p]>size[q]){
                id[y]=id[x];
                size[p]++;
            }
            else{
                id[x]=id[y];
                size[q]++;
            }
            count--;
        }
    }
}
