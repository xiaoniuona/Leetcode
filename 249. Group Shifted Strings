Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which 
forms the sequence:
"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], 
Return:
[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]
Note: For the return value, each inner list's elements must follow the lexicographic order.



public class Solution {
    public List<List<String>> groupStrings(String[] strings) {
        List<List<String>> result=new ArrayList<List<String>>();
        HashMap<String,List<String>> map=new HashMap<String,List<String>>();
        for(int i=0; i<strings.length; i++){
            StringBuilder distance=new StringBuilder();
            String s=strings[i];
            for(int j=0; j<s.length(); j++){
                int dis=(s.charAt(j)-s.charAt(0)+26)%26;
                distance.append(dis).append(' '); //need to add a space between every 2 distances to seperate distances like 2 and 22
            }
            String d=distance.toString();
            if(!map.containsKey(d)){
                List<String> group=new ArrayList<String>();
                group.add(s);
                map.put(d,group);
            }
            else{
                List<String> tmp=map.get(d);
                tmp.add(s);
                map.put(d,tmp);
            }
        }
        for(String str:map.keySet()){
            Collections.sort(map.get(str));
            result.add(map.get(str));
        }
        return result;
    }
}
